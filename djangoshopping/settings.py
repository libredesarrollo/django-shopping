"""
Django settings for djangoshopping project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

import platform

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#Language
LANGUAGE_CODE = 'en'   # Idioma por defecto
LANGUAGES = [
    ('en', 'English'),
    ('es', 'Español'),
]
# Carpeta donde se guardarán las traducciones
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]
#Language

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6)c9xu_htu$i75jwil1i^=stjyl69s4=szlor0c#6hs#o33w4w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

PAYPAL_PRODUCTION = os.environ.get('PAYPAL_PRODUCTION', True)

ALLOWED_HOSTS = ['acy29.pythonanywhere.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'store',
    'user',
    'django_ckeditor_5',
    'tailwind',
    'theme',
    # django auth all
    'allauth',
    'allauth.account',
]

#Tailwind
TAILWIND_APP_NAME = 'theme'

# NPM_BIN_PATH = 'C:/Users/andre/.config/herd/bin/nvm/v23.11.0/npm.cmd'
NPM_BIN_PATH = os.environ.get('NPM_BIN_PATH', 'npm')
# if platform.system() == "Windows":
#     NPM_BIN_PATH = "C:/Users/andre/.config/herd/bin/nvm/v23.11.0/npm.cmd"

# CKEDITOR
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': {
            'items': ['heading', '|', 'bold', 'italic', 'link',
                        'bulletedList', 'numberedList', 'blockQuote', 'imageUpload','sourceEditing', 'htmlEmbed' ],
                    }

    }
}
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/images')
# CKEDITOR

#PayPal
PAYPAL_CLIENT_ID = os.environ.get('PAYPAL_CLIENT_ID', 'ARYwUX89lCet9zZRP5U-px8Btet5wVYIuTv8LVLOSNwMdg3ofVn9uE4vTFTiXw0Cxti0jrRNS6eYQAV0')
PAYPAL_SECRET = os.environ.get('PAYPAL_SECRET', 'EFZUcwzBNOcDP7XUeUNaR4yR7fA_pPM1K6s02LP8TogupuLGnU49c87lZNEc93fV45Hax7LdqTRN-LA0')

#Stripe
STRIPE_KEY = os.environ.get('STRIPE_KEY', 'pk_test_51QTMqcEHJX14M8EE1DQU3xh1RtY0gd2IP6Ie5NGkPV1mVYA7XsmJ2yiNwze5FahYJ1KLYRftqBCsjKWGZE6Bzktg00O4Qojj8C')
STRIPE_SECRET = os.environ.get('STRIPE_SECRET', 'sk_test_51QTMqcEHJX14M8EEL0ZbpBwsH5iAnHn6Am1HzExVgOMrgQpdpithk8z2o6iVzaqRV6PQVNHw1oK4uKE8U0llui3800pP9vCanl')
# #PayPal
# PAYPAL_CLIENT_ID = os.environ.get('PAYPAL_CLIENT_ID', '<YOUR_PRO_PAYPAL_CLIENT_ID>')
# PAYPAL_SECRET = os.environ.get('PAYPAL_SECRET', '<YOUR_PRO_PAYPAL_SECRET>')

# #Stripe
# STRIPE_KEY = os.environ.get('STRIPE_KEY', '<YOUR_PRO_STRIPE_KEY>')
# STRIPE_SECRET = os.environ.get('STRIPE_SECRET', '<YOUR_PRO_STRIPE_SECRET>')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # django auth all
    "allauth.account.middleware.AccountMiddleware",
    # traducciones
    'django.middleware.locale.LocaleMiddleware', 
]

ROOT_URLCONF = 'djangoshopping.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # django auth all
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'djangoshopping.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Carpeta donde se guardarán los archivos estáticos recopilados
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Asegúrate de tener tu carpeta STATICFILES_DIRS si tienes otros archivos estáticos
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,  # importante para que Django siga mandando logs
#     'formatters': {
#         'verbose': {
#             'format': '[{asctime}] {levelname} {name}: {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'file': {
#             # 'level': 'DEBUG',  # captura todo desde DEBUG hasta ERROR
#             'level': 'ERROR',  # captura todo desde DEBUG hasta ERROR
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),  # archivo único
#             'formatter': 'verbose',
#         },
#     },
#     'root': {   # <-- logger global
#         'handlers': ['file'],
#         'level': 'ERROR',
#     },
# }